/*
Written by Roger Lopez Benet. All rights reserved. 
Script Introduction: Data on Wholefood's products sold in their San Francisco SOMA store were randomly sampled, then gathered and put into a newly built database.
The purpose of this assignment was to determine whether "healthier foods" cost less. 
*/

USE fmban_sql_analysis;

-- 1. Correlation Coeficient Analysis:

-- Calculate Correlation coefficient of the SUM of Healthy categories using a CTE with clean data

/*This query has allows us to see the correlation coefficient between products with healthy attributes ("healthy") 
and their prices. Thanks to the hypothesis testing has been conducted. 
*/

SELECT  category,
        -- Calculated Sample Correlation Coefficient
        -- y= price AND x = vegan + vegetarian + glutenfree + sugarconscious + wholefoodsdiet + lowsodium + lowfat
        (SELECT 
        (COUNT(*) * SUM((vegan + vegetarian + glutenfree + sugarconscious + wholefoodsdiet + lowsodium + lowfat + caloriesperserving) * price) - SUM((vegan + vegetarian + glutenfree + sugarconscious + wholefoodsdiet + lowsodium + lowfat + caloriesperserving)) * SUM(price)) / 
        (SQRT(COUNT(*) * SUM((vegan + vegetarian + glutenfree + sugarconscious + wholefoodsdiet + lowsodium + lowfat + caloriesperserving) * (vegan + vegetarian + glutenfree + sugarconscious + wholefoodsdiet + lowsodium + lowfat + caloriesperserving)) - SUM((vegan + vegetarian + glutenfree + sugarconscious + wholefoodsdiet + lowsodium + lowfat + caloriesperserving)) * SUM((vegan + vegetarian + glutenfree + sugarconscious + wholefoodsdiet + lowsodium + lowfat + caloriesperserving))) * SQRT(COUNT(*) * SUM(price * price) - SUM(price) * SUM(price))) 
        FROM fmban_data)
        AS correlation_coefficient_healthy_diets, -- The SUM of all "healthy" dietary filters was applied in order to get a stronger correlation coeficient 
			
					CONCAT('$', ROUND(AVG(price)), 2) AS avg_price, ROUND(AVG(caloriesperserving), 2) AS avg_cal -- The NULL (Chips), Beer, and Wine were not taken into account, because their price value wasn't multiplied by 100, and for the sake of the analysis were not counted, as well as the fact of not fitting into the question since they are not considered "healthy" foods. 
        
FROM fmban_data
WHERE price != 0 -- Were price is not zero, in order to avoid "false" NULL values. 
GROUP BY category
;


-- Insight 1:
-- Finding the Correlation coefficient of caloriesperserving and price

SELECT  category,
        -- Calculated Sample Correlation Coefficient 
        -- x = caloriesperserving AND y= price
        (COUNT(*) * SUM((caloriesperserving) * price) - SUM((caloriesperserving)) * SUM(price)) / 
        (SQRT(COUNT(*) * SUM((caloriesperserving) * (caloriesperserving)) - SUM((caloriesperserving)) * SUM((caloriesperserving))) * SQRT(COUNT(*) * SUM(price * price) - SUM(price) * SUM(price))) 
        AS correlation_coefficient_healthy_diets, 
			
					ROUND(AVG(price), 2) AS avg_price, ROUND(AVG(caloriesperserving), 2) AS avg_cal
        
FROM fmban_data
WHERE price != 0
GROUP BY category
;

-- Recommendation #1:
-- Showing healthier products per categories. In a ranking format

SELECT
    category, 
    SUM(
        CASE WHEN vegan = 1 THEN 1 ELSE 0 END +
        CASE WHEN glutenfree = 1 THEN 1 ELSE 0 END +
        CASE WHEN vegetarian = 1 THEN 1 ELSE 0 END +
        CASE WHEN dairyfree = 1 THEN 1 ELSE 0 END +
        CASE WHEN sugarconscious = 1 THEN 1 ELSE 0 END +
        CASE WHEN wholefoodsdiet = 1 THEN 1 ELSE 0 END +
        CASE WHEN lowsodium = 1 THEN 1 ELSE 0 END +
        CASE WHEN lowfat = 1 THEN 1 ELSE 0 END
    ) AS healthy_pts -- This CASE statement allows us to sum all the 1s in the dietary fields, therefore from the table generated by this we can see the categories with the highest and lowest "healthy scores".
FROM fmban_data
GROUP BY category, product
ORDER BY healthy_pts DESC -- In descending order, to get the highest ones first
LIMIT 10 -- Limit 10 in order to only see the top 10 healthiest categories. 
    ;
    
-- Showing unhealthier products per categories. In a ranking format

SELECT
    category, 
    SUM(
        CASE WHEN vegan = 1 THEN 1 ELSE 0 END +
        CASE WHEN glutenfree = 1 THEN 1 ELSE 0 END +
        CASE WHEN vegetarian = 1 THEN 1 ELSE 0 END +
        CASE WHEN dairyfree = 1 THEN 1 ELSE 0 END +
        CASE WHEN sugarconscious = 1 THEN 1 ELSE 0 END +
        CASE WHEN wholefoodsdiet = 1 THEN 1 ELSE 0 END +
        CASE WHEN lowsodium = 1 THEN 1 ELSE 0 END +
        CASE WHEN lowfat = 1 THEN 1 ELSE 0 END
    ) AS unhealthy_pts -- This CASE statement allows us to sum all the 1s in the dietary fields, therefore from the table generated by this we can see the categories with the highest and lowest "healthy scores".
FROM fmban_data
GROUP BY category, product
ORDER BY unhealthy_pts ASC -- In Ascending order, to get the lowest ones first
LIMIT 10 -- Limit 10 in order to only see the top 10 unhealthiest categories. 
    ;


-- Insight #1: 
-- Getting the "healthiest" product in Prepared foods

WITH
	healthy_ranking AS 
(SELECT
    category, product, price,
    SUM(
        CASE WHEN vegan = 1 THEN 1 ELSE 0 END +
        CASE WHEN glutenfree = 1 THEN 1 ELSE 0 END +
        CASE WHEN vegetarian = 1 THEN 1 ELSE 0 END +
        CASE WHEN dairyfree = 1 THEN 1 ELSE 0 END +
        CASE WHEN sugarconscious = 1 THEN 1 ELSE 0 END +
        CASE WHEN wholefoodsdiet = 1 THEN 1 ELSE 0 END +
        CASE WHEN lowsodium = 1 THEN 1 ELSE 0 END +
        CASE WHEN lowfat = 1 THEN 1 ELSE 0 END
    ) AS healthy_pts
FROM fmban_data
GROUP BY category, product, price
ORDER BY healthy_pts DESC) -- This CTE allows us to later reference the "healthy score" calculated in it

SELECT category, product, price, MAX(healthy_pts) AS healthy_rank -- Selected the highest ranked "healthy" product in one of the leat healthy categories, "prepared food"
FROM healthy_ranking -- Called CTE. This allows us to use the values provided by the CTE instead of the whole database's values. 
WHERE category LIKE 'prepared foods'
GROUP BY category, product, price
ORDER BY healthy_rank DESC
LIMIT 1
;

-- Insight 1: 
-- Getting the "unhealthiest" product in Prepared foods

WITH
	healthy_ranking AS 
(SELECT
    category, product, price,
    SUM(
        CASE WHEN vegan = 1 THEN 1 ELSE 0 END +
        CASE WHEN glutenfree = 1 THEN 1 ELSE 0 END +
        CASE WHEN vegetarian = 1 THEN 1 ELSE 0 END +
        CASE WHEN dairyfree = 1 THEN 1 ELSE 0 END +
        CASE WHEN sugarconscious = 1 THEN 1 ELSE 0 END +
        CASE WHEN wholefoodsdiet = 1 THEN 1 ELSE 0 END +
        CASE WHEN lowsodium = 1 THEN 1 ELSE 0 END +
        CASE WHEN lowfat = 1 THEN 1 ELSE 0 END
    ) AS healthy_pts
FROM fmban_data
GROUP BY category, product, price
ORDER BY healthy_pts DESC) -- This CTE allows us to later reference the "healthy score" calculated in it

SELECT category, product, price, MIN(healthy_pts) AS healthy_rank -- Selected the highest ranked "healthy" product in one of the leat healthy categories, "prepared food"
FROM healthy_ranking -- Called CTE. This allows us to use the values provided by the CTE instead of the whole database's values. 
WHERE category LIKE 'prepared foods'
GROUP BY category, product, price
ORDER BY healthy_rank ASC
LIMIT 1
;

-- Insight 2:

SELECT DISTINCT category, CONCAT('$',ROUND((price/caloriesperserving), 2)) AS price_per_cal -- By rounding the the calculation we only get 2 decimals. Also with CONCAT('$',) we get to puc the USD sign in front of the price value. 
FROM fmban_data
WHERE price != 0 -- Getting rid of false NULL values in the price field. 
ORDER BY price_per_cal DESC
LIMIT 10
;


-- Insight 3:
-- Showing the healthy ranking per products 

SELECT
    category, 
    SUM(
        CASE WHEN vegan = 1 THEN 1 ELSE 0 END +
        CASE WHEN glutenfree = 1 THEN 1 ELSE 0 END +
        CASE WHEN vegetarian = 1 THEN 1 ELSE 0 END +
        CASE WHEN dairyfree = 1 THEN 1 ELSE 0 END +
        CASE WHEN sugarconscious = 1 THEN 1 ELSE 0 END +
        CASE WHEN wholefoodsdiet = 1 THEN 1 ELSE 0 END +
        CASE WHEN lowsodium = 1 THEN 1 ELSE 0 END +
        CASE WHEN lowfat = 1 THEN 1 ELSE 0 END
    ) AS healthy_pts -- This CASE statement allows us to sum all the 1s in the dietary fields, therefore from the table generated by this we can see the categories with the highest and lowest "healthy scores".
FROM fmban_data
GROUP BY category
ORDER BY healthy_pts DESC -- In descending order, to get the highest ones first

    ;
